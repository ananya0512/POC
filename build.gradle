/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/java_library_plugin.html
 */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.node-gradle:gradle-node-plugin:2.2.4"
        classpath "org.jacoco:org.jacoco.ant:0.8.8"
    }
}
plugins {
    id 'java-library'
    id 'war'
    id 'eclipse'
    id 'eclipse-wtp'
    id "com.github.node-gradle.node" version "2.2.4"
    id 'maven'
    id "org.owasp.dependencycheck" version "6.5.3"
    id "jacoco"
    id "org.sonarqube" version "3.4.0.2513"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

def releaseVersion = "TM_24.4.0.4"
def nodeVersion = "16.15.0"
def instanceJarDir = "${rootProject.projectDir}/build/libs/Jars"
def angularDir = "${rootProject.projectDir}/client"
def webAppDirName = "${rootProject.projectDir}/src/main/webapp/"
def releaseRepo = "$nexusRepo/ref-mvn-rel"
def publishRepo = "$nexusRepo/ref-mvn-dev"

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url releaseRepo
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    flatDir {
        dirs 'lib'
    }
}

configurations.all {
	dependencies.matching {(it.group != 'com.google.cloud' && it.group != 'com.reflexis') ||
                           (it.group == 'com.google.cloud' && it.name != 'google-cloud-storage' && it.name != 'libraries-bom') ||
                           (it.group == 'com.reflexis' && it.name != 'indexer') }.all {
        transitive = false
    }

    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    instancesLib
    compile.extendsFrom(instancesLib)

    instancesLibToCopy
}

dependencyCheck {
    failBuildOnCVSS = 6
}

dependencies {

// ******************************************* * ONLY COMPILE LIBS * ******************************************* //

    def thymeleafVersion = '3.1.2.RELEASE'
    implementation group: 'org.thymeleaf', name: 'thymeleaf', version: "${thymeleafVersion}"
    implementation group: 'org.thymeleaf', name: 'thymeleaf-spring5', version: "${thymeleafVersion}"

    implementation group: 'javax.activation', name: 'activation', version: '1.1'
    implementation group: 'org.aopalliance', name: 'com.springsource.org.aopalliance', version: '1.0.0'
    implementation group: 'org.attoparser', name: 'attoparser', version: '2.0.5.RELEASE'
    implementation group: 'org.unbescape', name: 'unbescape', version: '1.1.6.RELEASE'

    //aspect jar
    def aspcectjVersion = '1.7.1'
    implementation group: 'org.aspectj', name: 'aspectjrt', version: "${aspcectjVersion}"
    implementation group: 'org.aspectj', name: 'aspectjweaver', version: "${aspcectjVersion}"

    //Twitter APIs
    implementation group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.2'

    //IMGSCALR
    implementation group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'

    //WNS JAR
    implementation group: 'com.github.fernandospr', name: 'java-wns', version: '1.4.0'

    //Reflexis Jars
    implementation group: 'com.reflexis', name: 'reflexis-kernel-client', version: '3.+', changing : 'true'

    //PD4ML
    implementation group: 'com.pd4ml', name: 'pd4ml', version: '4.0.10'

    //HBASE
    implementation group: 'org.apache.hbase', name: 'hbase', version: '0.90.6'

// ***************************************** END ONLY COMPILE LIBS ***************************************** //



// ******************************************* * COMPILE AND COPY TO INSTANCES LIBS * ******************************************* //

    instancesLib group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    instancesLib group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.2.1'

    //Spring libraries
    def springVersion = '5.3.32'
    instancesLib group: 'org.springframework', name: 'spring-core', version: "${springVersion}"
    instancesLib group: 'org.springframework', name: 'spring-aop', version: "${springVersion}"
    instancesLib group: 'org.springframework', name: 'spring-beans', version: "${springVersion}"
    instancesLib group: 'org.springframework', name: 'spring-context', version: "${springVersion}"
    instancesLib group: 'org.springframework', name: 'spring-web', version: "${springVersion}"
    instancesLib group: 'org.springframework', name: 'spring-webmvc', version: "${springVersion}"
    instancesLib group: 'org.springframework', name: 'spring-test', version: "${springVersion}"
    instancesLib group: 'org.springframework', name: 'spring-expression', version: "${springVersion}"

    //Java Mail APIs
    instancesLib 'com.sun.mail:javax.mail:1.6.2'

    //APNS - Push Notification APIs
    instancesLib group: 'com.eatthepath', name: 'pushy', version: '0.14.2'
    instancesLib group: 'com.eatthepath', name: 'fast-uuid', version: '0.1'
    instancesLib group: 'io.netty', name: 'netty-all', version: '4.1.101.Final'

    //Commons jars
    instancesLib group: 'commons-codec', name: 'commons-codec', version: '1.14'
    instancesLib group: 'org.apache.commons', name: 'commons-csv', version: '1.8'
    instancesLib group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
    instancesLib group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    instancesLib group: 'commons-io', name: 'commons-io', version: '2.7'
    instancesLib group: 'commons-net', name: 'commons-net', version: '3.9.0'
    instancesLib group: 'commons-pool', name: 'commons-pool', version: '1.6'
    instancesLib group: 'commons-lang', name: 'commons-lang', version: '2.6'
    instancesLib 'org.apache.commons:commons-lang3:3.12.0'

    //Database jars
    instancesLib group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.10'

    //HTTPClient jars
    def httpClientVersion='4.5.14'
    instancesLib group: 'org.apache.httpcomponents', name: 'httpclient', version: "${httpClientVersion}"
    instancesLib group: 'org.apache.httpcomponents', name: 'httpclient-cache', version: "${httpClientVersion}"
    instancesLib group: 'org.apache.httpcomponents', name: 'httpmime', version: "${httpClientVersion}"
    instancesLib group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.15'

    //POI
    def apachePoiVersion = '5.2.2'
    instancesLib group: 'org.apache.poi', name: 'poi', version: "${apachePoiVersion}"
    instancesLib group: 'org.apache.poi', name: 'poi-ooxml', version: "${apachePoiVersion}"

    //XML BEANS
    instancesLib "org.apache.xmlbeans:xmlbeans:5.0.3"

    //JSCH
    instancesLib group: 'com.jcraft', name: 'jsch', version: '0.1.55'

    //JSON
    instancesLib group: 'org.json', name: 'json', version: '20231013'

    //JSOUP
    instancesLib group: 'org.jsoup', name: 'jsoup', version: '1.16.1'

    //TIKA
    instancesLib group: 'org.apache.tika', name: 'tika-core', version: '2.8.0'


    // SAXON for XSLT Parsing
    instancesLib group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.4'
    instancesLib group: 'org.xmlresolver', name: 'xmlresolver', version: '5.2.3'


    //JACKSON JARS
    def jacksonVersion = '2.16.0'
    instancesLib group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}"
    instancesLib group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jacksonVersion}"
    instancesLib group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.16.0"

    instancesLib group: 'com.reflexis.instance.cloud', name: 'GoogleAuth', version: '1.+'
    
    instancesLib group: 'com.google.api.grpc', name: 'proto-google-cloud-pubsub-v1', version: '1.79.0'
	instancesLib group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.22.0'
	instancesLib (group: 'com.google.cloud', name: 'google-cloud-storage', version: '1.113.4') {
		exclude group: 'com.google.protobuf', module: 'protobuf-java'
		exclude group: 'com.google.protobuf', module: 'protobuf-java-util'
	}
	instancesLib group: 'com.google.protobuf', name: 'protobuf-java', version: '3.24.4'
	instancesLib group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.24.1'
	
	instancesLib group: 'com.google.cloud', name: 'google-cloud-pubsub', version: '1.110.0'
    
    instancesLib (group: 'com.reflexis', name: 'indexer', version: 'v2.+', changing : 'true') {
        exclude group: 'commons-codec', module: 'commons-codec'
        exclude group: 'commons-fileupload', module: 'commons-fileupload'
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'commons-lang', module: 'commons-lang'
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'javax.servlet.jsp', module: 'javax.servlet.jsp-api'
        exclude group: 'org.json', module: 'json'
        exclude group: 'org.jsoup', module: 'jsoup'
        exclude group: 'org.mongodb', module: 'mongo-java-driver'
        exclude group: 'org.apache.poi', module: 'poi'
        exclude group: 'org.apache.poi', module: 'poi-ooxml'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.springframework', module: 'spring-core'
        exclude group: 'org.springframework', module: 'spring-aop'
        exclude group: 'org.springframework', module: 'spring-beans'
        exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'org.springframework', module: 'spring-web'
        exclude group: 'org.springframework', module: 'spring-webmvc'
        exclude group: 'org.springframework', module: 'spring-test'
        exclude group: 'org.springframework', module: 'spring-expression'
        exclude group: 'org.apache.tika', module: 'tika-core'
        exclude group: 'com.reflexis', module: 'PULSE-MongoCore'
        exclude group: 'com.reflexis', module: 'PULSE-Logger'
    }

    instancesLib group: 'com.reflexis', name: 'TranslationClient', version: '1.+', changing : 'true'

    //DB2JCC jars
    instancesLib group: 'com.ibm.db2.jcc', name: 'db2jcc', version: 'db2jcc4'
    instancesLib group: 'com.ibm.db2', name: 'db2jcc_license_cu', version: '8.1'

    //JSTL
    instancesLib group: 'org.apache.taglibs', name: 'taglibs-standard-spec', version: '1.2.5'
    instancesLib group: 'org.apache.taglibs', name: 'taglibs-standard-impl', version: '1.2.5'
    instancesLib group: 'org.apache.taglibs', name: 'taglibs-standard-jstlel', version: '1.2.5'

    //HADOOP
    instancesLib group: 'org.apache.hadoop', name: 'hadoop-main', version: '3.3.3'
    instancesLib group: 'org.apache.hadoop', name: 'hadoop-common', version: '3.3.6'

    //slf4j
    instancesLib group: 'org.slf4j', name: 'slf4j-api', version: '1.7.33'

    //Google Storage Dependencies
    instancesLib platform('com.google.cloud:libraries-bom:26.18.0')
    instancesLib 'com.google.cloud:google-cloud-storage'
    instancesLib group: 'com.zebra', name: 'zgcs-manager', version: '1.+'

    //fcmNotifier Dependencies
    def firebaseSDKVersion = '9.2.0'
    instancesLib group: 'com.google.firebase', name: 'firebase-admin', version: "${firebaseSDKVersion}"

// ***************************************** END COMPILE AND COPY TO INSTANCES LIBS ***************************************** //


// ******************************************* * ONLY COPY TO INSTANCES LIBS * ******************************************* //

    instancesLibToCopy 'com.google.android:annotations:4.1.1.4'
    instancesLibToCopy 'org.conscrypt:conscrypt-openjdk-uber:2.5.1'
    instancesLibToCopy 'com.google.cloud:google-cloud-pubsub:1.110.0'
    instancesLibToCopy 'io.perfmark:perfmark-api:0.19.0'
    instancesLibToCopy 'com.google.api.grpc:proto-google-cloud-pubsub-v1:1.92.0'
    instancesLibToCopy 'org.apache.ws.commons.schema:XmlSchema:1.4.3'

// ***************************************** END ONLY COPY TO INSTANCES LIBS ***************************************** //


// ***************************************** * TEST LIBS * ***************************************** //

    // Required by Mockito
    implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.12.17'
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.12.17'
    testImplementation group: 'org.objenesis', name: 'objenesis', version: '3.3'

    //testImplementation group: 'org.jmockit', name: 'jmockit', version: '1.41'


    // JUnit 5
    def junitVersion = '5.9.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junitVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitVersion}"

    // JUnit Platform
    def junitPlatformVersion = '1.9.1'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: "${junitPlatformVersion}"
    testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: "${junitPlatformVersion}"

    // OpenTest4J (Required by JUnit)
    testImplementation group: 'org.opentest4j', name: 'opentest4j', version: '1.2.0'

    // Mockito
    def mockitoVersion = '4.8.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: "${mockitoVersion}"

    // AssertJ
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.23.1'

    //    Mongock jars
    def mongockJarsVersion="5.4.0"
    implementation 'com.reflexis:ztm-mongock:1.0'
    implementation group: 'io.mongock', name: 'mongock-api', version: "${mongockJarsVersion}"
    implementation group: 'io.mongock', name: 'mongock-driver-api', version: "${mongockJarsVersion}"
    implementation group: 'io.mongock', name: 'mongock-driver-core', version: "${mongockJarsVersion}"
    implementation group: 'io.mongock', name: 'mongock-runner-core', version: "${mongockJarsVersion}"
    implementation group: 'io.mongock', name: 'mongock-standalone-base', version: "${mongockJarsVersion}"
    implementation group: 'io.mongock', name: 'mongock-utils', version: "${mongockJarsVersion}"
    implementation group: 'io.mongock', name: 'mongodb-v3-driver', version: "${mongockJarsVersion}"

    def mongockProfessionalJarsVersion="5.2.2"
    implementation group: 'io.mongock.professional', name: 'mongock-standalone', version: "${mongockProfessionalJarsVersion}"
    implementation group: 'io.mongock.professional', name: 'mongock-runner-common', version: "${mongockProfessionalJarsVersion}"
    implementation group: 'io.mongock.professional', name: 'mongock-api', version: "${mongockProfessionalJarsVersion}"

    implementation group: 'io.mongock', name: 'jwt-api', version: '1.0.3'
    implementation group: 'org.apache.maven', name: 'maven-artifact', version: '3.6.1'
//    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    implementation group: 'org.javassist', name: 'javassist', version: '3.28.0-GA'
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.1'
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation group: 'org.objenesis', name: 'objenesis', version: '3.2'


// *************************************** END TEST LIBS *************************************** //

}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    jacocoClasspath = project.buildscript.configurations.classpath
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacoco/reports/html")
    }

    dependsOn test
}

jacocoTestCoverageVerification {
    jacocoClasspath = project.buildscript.configurations.classpath
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.02
            }

            includes = [
                    "com.reflexis.rsp.incoming.controller.FeedProcessRSHandler",
                    "com.reflexis.instance.ACPFlow.feed.FeedActionService",
                    "com.reflexis.core.service.RflxDomainLangService",
                    "com.reflexis.forms.etlService.TemplateETLService",
                    "com.reflexis.forms.creator.questionGroup.service.QuestionGroupService",
                    "com.reflexis.forms.creator.controller.QuestionGroupController",
                    "com.reflexis.instance.ACPFlow.broadcast.BroadcastMsgActionService",
                    "com.reflexis.core.service.RflxDomainLangService",
                    "com.reflexis.forms.util.FormSchedulerUtils"
            ]
        }

        dependsOn jacocoTestReport
    }
}

node {
    version = nodeVersion
    download = true
    nodeModulesDir = file("$angularDir")
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }

    wtp {
        component {
            resource deployPath: '/', sourcePath: 'src/main/webapp'
            libConfigurations += [configurations.runtimeClasspath]
        }

        facet{
            facet name: 'jst.web', version: '3.0'
            facet name: 'java', version: '1.8'
        }
    }
}

def gitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def gitBranch = { ->
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return branch
}

task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side assets for production'
    args = ['run', 'buildProd']
}

def jarComponents = [
        //Mongo Core Jar, this will be published and can be downloaded and used by all applications for Mongo Connection
        [baseName:'PULSE-MongoCore', filePattern:['com/reflexis/core/db/**'], excludeFilePattern:[], targetFolder:'release'],

        //Pulse Core Jar, this contains core package of mongo
        [baseName:'PULSE-Core', filePattern:['com/reflexis/core/**'],
         excludeFilePattern:['com/reflexis/core/db/**', 'com/reflexis/core/logger/**'], targetFolder:'release'],

        //Pulse Translation Utility Jar, Utility jar which internally uses Translation APIs
        [baseName:'PULSE-Translation', filePattern:['com/reflexis/core/translation/tm/**'], excludeFilePattern:[],
         targetFolder:'release'],

        //Pulse Logger Jar, this will be published and can be downloaded and used by all applications for Logging.
        [baseName:'PULSE-Logger', filePattern:['com/reflexis/core/logger/**'], excludeFilePattern:[], targetFolder:'release'],

        //ACPFlow jar
        [baseName:'ACPFlow', filePattern:['com/reflexis/instance/ACPFlow/**','com/reflexis/instance/common/**'
                                          ,'com/reflexis/instance/context/**','com/reflexis/instance/disposition/**','com/reflexis/shared/**'
                                          ,'com/reflexis/core/db/**', 'com/reflexis/rsp/dao/**','com/reflexis/rsp/shared/**','com/reflexis/rsp/incoming/formatter/**'
                                          ,'com/reflexis/rsp/incoming/service/**','com/reflexis/rsp/SystemManager/Service/shared/**'
                                          ,'com/reflexis/rsp/SystemManager/utils/**']
         ,excludeFilePattern:[], targetFolder:'release'],

        //CACore jar
        [baseName:'CACore', filePattern:['com/reflexis/shared/**','com/reflexis/instance/ChannelAdapter/**'
                                         ,'com/reflexis/instance/context/**','com/reflexis/instance/common/**','com/reflexis/instance/disposition/**'
                                         ,'com/reflexis/instance/ThrottlingAPI/**','com/reflexis/rsp/dao/**','com/reflexis/rsp/shared/**'
                                         ,'com/reflexis/rsp/SystemManager/utils/**','com/reflexis/rsp/SystemManager/Service/shared/**']
         ,excludeFilePattern:[]
         ,copyJarsTo:['CAMailer','CAText','CAMonitor'], targetFolder:'release'],

        //NotifierCore jar
        [baseName:'NotifierCore', filePattern:['com/reflexis/shared/**','com/reflexis/instance/NotifierCore/**'
                                               ,'com/reflexis/instance/context/**','com/reflexis/instance/common/**','com/reflexis/rsp/dao/**'
                                               ,'com/reflexis/rsp/shared/**','com/reflexis/rsp/SystemManager/utils/**'
                                               ,'com/reflexis/rsp/SystemManager/Service/shared/**']
         ,excludeFilePattern:[], targetFolder:'release'],

        //NCClient jar, this will be published and can be downloaded and used by other applications for socket connection
        [baseName:'RFLX_NCClient', filePattern:['com/reflexis/instance/ClientAPI/ChannelAdapter/**','com/reflexis/core/util/HashingStuff.class'
                                                ,'com/reflexis/shared/global/Constants.class'],excludeFilePattern:[],targetFolder:'release'],
        //RflxForms jar
        [baseName:'RflxForms', filePattern:['com/reflexis/forms/**'],
         excludeFilePattern:['com/reflexis/forms/conduit/**','com/reflexis/forms/creator/**','com/reflexis/forms/pinBoard/**'
                             ,'com/reflexis/forms/redirect/**','com/reflexis/forms/resolver/**'], targetFolder:'release'],

        //Conduit Core Jar
        [baseName:'CSCore', filePattern:['com/reflexis/shared/**','com/reflexis/instance/conduit/**','com/reflexis/instance/context/**'
                                         ,'com/reflexis/instance/common/**','com/reflexis/instance/disposition/**','com/reflexis/instance/ThrottlingAPI/**'
                                         ,'com/reflexis/rsp/dao/**','com/reflexis/rsp/shared/**','com/reflexis/rsp/SystemManager/utils/**'
                                         ,'com/reflexis/rsp/SystemManager/Service/shared/**','com/reflexis/admin/service/**']
         ,excludeFilePattern:[], targetFolder:'release'],

        //Conduit Service Jars
        //ModelETLHandler
        [baseName:'ModelETLHandler', filePattern:['com/reflexis/forms/conduit/ETLHandler/ModelETLHandler.class']
         ,excludeFilePattern:[], targetFolder:'conduit'],

        //ModelWithdrawETLHandler Jar
        [baseName:'ModelWithdrawETLHandler', filePattern:['com/reflexis/forms/conduit/ETLHandler/ModelWithdrawETLHandler.class']
         ,excludeFilePattern:[] ,targetFolder:'conduit'],

        //WalkSchedule jar
        [baseName:'WalkSchedule', filePattern: ['com/reflexis/forms/conduit/walkjobs/WalkSchedule.class']
         ,excludeFilePattern:[] ,targetFolder:'conduit'],

        //WalkExpire jar
        [baseName:'WalkExpire', filePattern: ['com/reflexis/forms/conduit/walkjobs/WalkExpire.class']
         , excludeFilePattern:[], targetFolder:'conduit'],

        //WalkOverdue jar
        [baseName:'WalkOverdue', filePattern: ['com/reflexis/forms/conduit/walkjobs/WalkOverdue.class']
         ,excludeFilePattern:[], targetFolder:'conduit'],

        //WatchProject jar
        [baseName:'WatchProject', filePattern: ['com/reflexis/instance/conduit/watchproject/WatchProject.class']
         ,excludeFilePattern:[], targetFolder:'conduit'],

        //Walk/Form ETL Utility Jars
        [baseName:'EtlUtility', filePattern:['com/reflexis/forms/**','com/reflexis/instance/context/**','com/reflexis/shared/**','com/reflexis/rsp/dao/**'
                                             ,'com/reflexis/rsp/SystemManager/**','com/reflexis/core/**','com/reflexis/admin/**'],
         excludeFilePattern:['com/reflexis/forms/conduit/**','com/reflexis/forms/creator/**','com/reflexis/forms/pinBoard/**'
                             ,'com/reflexis/forms/redirect/**','com/reflexis/forms/resolver/**'], targetFolder:'utility'],

        //Feed Datafix Utility Jars
        [baseName:'Datafix', filePattern:['com/reflexis/instance/context/**','com/reflexis/shared/**','com/reflexis/rsp/dao/**'
                                          ,'com/reflexis/rsp/SystemManager/**','com/reflexis/core/**','com/reflexis/admin/**'],
         excludeFilePattern:['com/reflexis/forms/conduit/**','com/reflexis/forms/creator/**','com/reflexis/forms/pinBoard/**'
                             ,'com/reflexis/forms/redirect/**','com/reflexis/forms/resolver/**'], targetFolder:'utility'],

        //FileWatcher jar
        [baseName:'FileWatcher', filePattern: ['com/reflexis/instance/conduitjob/filewatcher/FileWatcher.class']
         ,excludeFilePattern:[], targetFolder:'conduit'],
]

jarComponents.each { jarFile ->
    project.task(jarFile.baseName, type : Jar) {
        baseName = jarFile.baseName
        from sourceSets.main.output
        includes = jarFile.filePattern
        excludes = jarFile.excludeFilePattern
        destinationDir = file("$instanceJarDir/"+jarFile.targetFolder)
        manifest {
            attributes (
                    "Release-Version":"${rootProject.name}_${releaseVersion}" ,
                    "SHA":"${gitHash}.${gitBranch}",
                    "Built-Date":new Date() ,
                    "Built-Compile-Version":java.toolchain.languageVersion.get().toString() ,
                    "Built-JDK": System.getProperty('java.version') ,
                    "Built-Gradle": gradle.gradleVersion
            )
        }
    }
}



task prepareStatic(dependsOn : 'buildClient') {
    group = 'build'
    description = 'Preparing static content'
    doLast {
        ant.zip(destfile: file("${rootProject.projectDir}/build/libs/MYWORK.zip"), basedir: "src/main/webapp", includes : "web/**, css/**, scripts/**, images/**, xslt/**, ckeditor*/**, audio/**, plugins/**, pd4ml/**")
        ant.zip(destfile: file("${rootProject.projectDir}/build/libs/knlconfig_MYWORK.zip"), basedir: "environment", includes : "knlconfig/**")
    }
}

task deleteReleaseFolderContent(type: Delete) {
    delete "$instanceJarDir/release"
}

task packageNotifierInstanceJars(type: Zip) {
    archiveFileName = "Notifier_Instances.zip"
    destinationDirectory = file("${rootProject.projectDir}/build/libs/Jars/notifier")

    from "$instanceJarDir/release"

    finalizedBy deleteReleaseFolderContent
}

task copyInstanceJars {
    doLast {
        jarComponents.each { jarFile ->
            if(jarFile.copyJarsTo != null && jarFile.copyJarsTo.size() >= 0){
                def jarName = jarFile.baseName+".jar"
                jarFile.copyJarsTo.each { copyJarFile ->
                    def copyJarName = copyJarFile + ".jar"
                    copy {
                        from file("$instanceJarDir/"+jarFile.targetFolder+"/$jarName")
                        into file("$instanceJarDir/"+jarFile.targetFolder)
                        rename("$jarName", "$copyJarName")
                    }
                }
            }
            copy {
                into "$instanceJarDir/release"
                from configurations.instancesLib, configurations.instancesLibToCopy
            }
        }
    }

    finalizedBy packageNotifierInstanceJars
}

task createMongockJar(type : Jar){
    baseName = "ztm-mywork-mongock"
    from(sourceSets.main.output) {
        include "com/zebra/**"
        destinationDir = file("$instanceJarDir/")
    }
}

task deleteMongockJar(type: Delete) {
    delete "$instanceJarDir/ztm-mywork-mongock.jar"
}

war {
    dependsOn buildClient
    dependsOn jar
    exclude("${webAppDirName}/WEB-INF/lib")
    exclude("${webAppDirName}/WEB-INF/classes")

    classpath fileTree("$instanceJarDir/ztm-mywork-mongock.jar")
    rootSpec.exclude("**/zebra/")

    manifest {
        attributes (
                "Release-Version":"${rootProject.name}_${releaseVersion}" ,
                "SHA":"${gitHash}.${gitBranch}",
                "Built-Date":new Date() ,
                "Built-Compile-Version":java.toolchain.languageVersion.get().toString() ,
                "Built-JDK": System.getProperty('java.version') ,
                "Built-Gradle": gradle.gradleVersion
        )
    }
    finalizedBy prepareStatic, deleteMongockJar
}

jar{
    //dependsOn formsJar
    //Creation of all jars
    jarComponents.each { jarFile ->
        println("Creation of "+ jarFile.baseName + " Jar started!")
        dependsOn jarFile.baseName
        println("Creation of "+ jarFile.baseName + " Jar Completed!")
    }

    finalizedBy copyInstanceJars, createMongockJar
}

group = 'com.reflexis'
artifacts {
    archives(file("$instanceJarDir/snapshots/PULSE-Logger.jar")) {
        name = 'PULSE-Logger-1.0-SNAPSHOT'
        classifier = "logger"
        extension = "jar"
        type = "jar"
    }
    archives(file("$instanceJarDir/snapshots/PULSE-MongoCore.jar")) {
        name = 'PULSE-MongoCore-1.0-SNAPSHOT'
        classifier = "mongo-core"
        extension = "jar"
        type = "jar"
    }
    archives(file("$instanceJarDir/snapshots/RFLX_NCClient.jar")) {
        name = 'RFLX_NCClient-1.0-SNAPSHOT'
        classifier = "notifier-client"
        extension = "jar"
        type = "jar"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: publishRepo) {
                authentication(userName: nexusUser, password: nexusPassword)
            }
            addFilter('PULSE-Logger') {artifact, file ->
                artifact.name == 'PULSE-Logger'
            }
            addFilter('PULSE-MongoCore') {artifact, file ->
                artifact.name == 'PULSE-MongoCore'
            }
            addFilter('RFLX_NCClient') {artifact, file ->
                artifact.name == 'RFLX_NCClient'
            }
        }
    }
}

sonarqube {
  properties {
    property "sonar.projectKey", "ZTM"
  }
}
